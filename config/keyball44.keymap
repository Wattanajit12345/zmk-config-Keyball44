#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&nice_view_spi { cs-gpios = <&pro_micro 1 GPIO_ACTIVE_HIGH>; };

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp LG(ENTER)      &kp Q      &kp W   &kp E           &kp R   &kp T              &kp Y        &kp U  &kp I      &kp O    &kp BACKSPACE  &kp F5
&kp ENTER          &kp A      &kp S   &kp D           &kp F   &kp G              &kp H        &kp J  &kp K      &kp L    &kp P          &kp SQT
&kp LG(RS(ENTER))  &kp Z      &kp X   &kp C           &kp V   &kp B              &kp N        &kp M  &kp COMMA  &kp DOT  &kp QUESTION   &mkp LCLK
&kp LGUI           &mkp RCLK  &tog 3  &kp LEFT_SHIFT  &tog 1             &tog 2  &lt 4 SPACE                                            &tog 5
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp LBRC        &kp RIGHT_BRACE              &kp PLUS      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp BSPC  &none
&none  &kp FSLH              &kp LBKT               &kp RBKT           &kp SEMI        &kp COLON                    &kp MINUS     &kp LCTRL     &kp N5        &kp N6        &kp N0    &kp DOUBLE_QUOTES
&none  &kp NON_US_BACKSLASH  &kp LESS_THAN          &kp GREATER_THAN   &kp UNDERSCORE  &kp EQUAL                    &kp ASTERISK  &kp N1        &kp N2        &kp N3        &kp DOT   &kp COMMA
&none  &trans                &trans                 &trans             &trans                               &trans  &trans                                                            &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&none   &none            &none        &none     &none       &none                    &none   &none  &none   &none   &none  &sys_reset
&none   &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT              &none   &none  &none   &none   &none  &none
&none   &kp AMPERSAND    &trans       &trans    &trans      &trans                   &none   &none  &trans  &trans  &none  &none
&trans  &trans           &trans       &trans    &trans                       &trans  &trans                                &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&msc SCRL_UP    &none          &kp TAB    &kp UP_ARROW  &none      &none                  &none         &none       &none             &none             &none         &none
&msc SCRL_DOWN  &kp BACKSPACE  &kp LEFT   &kp DOWN      &kp RIGHT  &none                  &none         &kp LG(T)   &kp LG(R)         &kp LG(W)         &kp LC(LEFT)  &kp LC(RIGHT)
&kp LG(RS(Z))   &kp LG(A)      &kp LG(Z)  &kp LG(X)     &kp LG(V)  &kp LG(C)              &kp LG(DOWN)  &kp LC(UP)  &kp LG(RS(LBKT))  &kp LG(RS(RBKT))  &kp LG(LBKT)  &kp LG(RBKT)
&kp F1          &trans         &trans     &trans        &trans                    &trans  &mo 3                                                                       &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&none   &kp N1          &kp N2          &kp N3        &kp N4     &kp N5                 &kp N6         &kp N7     &kp N8  &kp N9     &kp N0     &none
&none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                  &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK  &none
&none   &none           &none           &none         &none      &none                  &kp PAGE_DOWN  &none      &none   &none      &none      &none
&trans  &trans          &trans          &trans        &trans                 &mkp RCLK  &mkp LCLK                                               &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &tog 6                                  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans      &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans      &trans             &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans                  &none  &none                                   &trans
            >;
        };
    };
};
